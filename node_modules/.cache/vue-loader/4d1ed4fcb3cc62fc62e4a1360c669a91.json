{"remainingRequest":"/Users/drewhyatt/projects/CandidateRank-Frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/drewhyatt/projects/CandidateRank-Frontend/src/components/Admin-Dashboard/admin/setup/evaluatorsManagement.vue?vue&type=style&index=0&id=ecd8757c&scoped=true&lang=scss&","dependencies":[{"path":"/Users/drewhyatt/projects/CandidateRank-Frontend/src/components/Admin-Dashboard/admin/setup/evaluatorsManagement.vue","mtime":1594677766418},{"path":"/Users/drewhyatt/projects/CandidateRank-Frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/drewhyatt/projects/CandidateRank-Frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/drewhyatt/projects/CandidateRank-Frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/drewhyatt/projects/CandidateRank-Frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/drewhyatt/projects/CandidateRank-Frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/drewhyatt/projects/CandidateRank-Frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKICAjZXZhbHVhdG9yVGFibGUgdGggewogIGZvbnQtc2l6ZTogMTBweDsKfQogI2V2YWx1YXRvclRhYmxlIHRkIHsKICBmb250LXNpemU6IDEycHg7CiAgcGFkZGluZzogNXB4IDE1cHggNXB4IDE1cHg7CiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKfQojZXZhbHVhdG9yVGFibGUgdGQ6bnRoLWNoaWxkKDIpICB7CiAgbWF4LXdpZHRoOiAyMDBweDsKICB3aGl0ZS1zcGFjZTogbm93cmFwOwogIG92ZXJmbG93OiBoaWRkZW47CiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7Cn0KI2V2YWx1YXRvclRhYmxlIHRkOmxhc3QtY2hpbGQgewogICB3aWR0aDogMzAwcHg7Cn0K"},{"version":3,"sources":["evaluatorsManagement.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"evaluatorsManagement.vue","sourceRoot":"src/components/Admin-Dashboard/admin/setup","sourcesContent":["<template>\n  <div class=\"container-fluid\">\n    <b-row>\n      <!-- <b-col sm=\"9\"></b-col> -->\n      <!-- END COL-9 -->\n      <b-col sm=\"3\">\n        <label class=\"tx-12 wt-600 dark-gray\">Pre-Interview Email Reminders:</label>\n        <br />\n        <input type=\"checkbox\">\n        <span class=\"tx-12 wt-400\">Active</span>\n      </b-col>\n      <b-col sm=\"3\">\n          <label class=\"tx-12 wt-600 dark-gray\">Interview Date Email Reminders:</label>\n          <br />\n          <input type=\"checkbox\">\n          <span class=\"tx-12 wt-400\">Active</span>\n      </b-col>\n      <b-col sm=\"3\">\n          <label class=\"tx-12 wt-600 dark-gray\">Other Email Reminders:</label>\n          <br />\n          <input type=\"checkbox\">\n          <span class=\"tx-12 wt-400\">Active</span>\n      </b-col>\n\n      <!-- END COL-4 -->\n      <b-col sm=\"3\" class=\"text-right\">\n        <label></label>\n        <b-button class=\"mt-4\" size=\"sm\" variant=\"primary\" @click=\"updateOrganization()\">Save & Continue</b-button> \n      </b-col>\n      <!-- END COL-8 -->\n      <b-col sm=\"12\"><hr /></b-col>\n      <!-- END COL-12 -->\n      <b-col sm=\"12\">\n        <table id=\"evaluatorTable\" class=\"table table-bordered table-hover\">\n          <thead>\n              <tr>\n                <th v-for=\"(x, index) in fields\" scope=\"col\">\n                   <input  v-if=\"index == 6\" type=\"checkbox\" class=\"mr-1\"> {{ x }} \n                </th>\n              </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(x, index) in currentTerm.faculty\" :key=\"x.email\">\n              <td>{{ x.name }}</td>\n              <td>{{ x.phone }}</td>\n              <td>{{ x.email }}</td>\n              <td>\n                <!-- RESIDENT FACULTY -->\n                <b-form-group>\n                  <b-form-radio-group\n                    @change=\"updateEvaluatorType(index, x.role)\"\n                    v-model=\"x.role\"\n                    :options=\"EvaluatorTypes\"\n                    :value=\"x.role\"\n                  >\n                  </b-form-radio-group>\n                </b-form-group>\n              </td>\n              <td>\n                <!-- PRE-INTERVIEW AVALIBILITY  -->\n                <b-form-group>\n                  <b-form-radio-group\n                    @change=\"updatePreinterview(index, x.preinterview)\"\n                    v-model=\"x.preinterview\"\n                    :options=\"preinterviewoptions\"\n                    :value=\"x.preinterview\"\n                  >\n                  </b-form-radio-group>\n                </b-form-group>\n              </td> \n             <!--  <td>\n              <b-form-group>\n                  <b-form-radio-group\n                    @change=\"updateOnsite(index, x.onsite)\"\n                    v-model=\"x.onsite\"\n                    :options=\"onsiteoptions\"\n                    :value=\"x.onsite\"\n                  >\n                  </b-form-radio-group>\n                </b-form-group>\n              </td>\n              <td>\n                 <span v-if=\"x.dates\" class=\"fw block\">\n                   <input type=\"checkbox\">\n                   Check All\n                 </span>\n                <span v-if=\"x.dates\" class=\"fw block\" v-for=\"i in interviewDates\">\n                   <input \n                    type=\"checkbox\" \n                    :checked=\"x.dates.some(e => e === i)\"\n                    @click=\"toggleDate(index, i)\">\n                    {{ i }}\n                 </span>\n              </td> -->\n            </tr>\n          </tbody>\n        </table>\n        <!-- END TABLE -->\n      </b-col>\n      <!-- END COL-12 -->\n    </b-row>\n    <!-- END ROW -->\n  </div>\n  <!-- END PARENT DIV -->\n</template>\n\n<script>\nimport axios from 'axios'\nconst API_URL = process.env.VUE_APP_API_URL\nexport default {\n\tname: 'evaluatorsManagement',\n  props: [\"organization\",\"user\",\"candidates\",\"surveys\",\"faculty\", \"currentTerm\"],\n  watch: {\n    organization: function(newVal, oldVal) {\n      if(newVal) {\n        this.organization = newVal\n      }\n    },\n    currentTerm: function(newVal, oldVal) {\n      if(newVal) {\n        this.year = newVal.year\n        let x\n        let terms = this.organization.terms\n        let term\n        for(x in terms) { \n          if(terms[x].year == this.year) {\n            term = this.organization.terms[x]\n            this.interviewDates = terms[x].dates\n          }\n        }\n      }\n    }\n  },\n\tdata() {\n    \treturn {\n        year: this.currentTerm.year,\n        fields:[\n          'Name',\n          'Phone',\n          'Email',\n          'Resident or faculty',\n          'Available for pre interview',\n          'Available for onsite interviews',\n          'Interview Dates',\n          // '# pre interviews assigned'\n          ],\n        options: [true , false],\n        preinterviewoptions: [true , false],\n        onsiteoptions: [true , false],\n        EvaluatorTypes: ['Resident', 'Faculty'],\n        interviewDates: [],\n        term: null,\n      }\n  \t},\n    computed: {\n       priorYears() {\n        let x\n        let terms = this.organization.terms\n        let years = []\n        for(x in terms) { \n          years.push(terms[x].year) \n        }\n        return years\n      },\n    },\n    mounted() {},\n  \tmethods: {\n      updateEvaluatorType(index, type) {\n        console.log(index, type)\n        if(type == undefined) {\n           this.currentTerm.faculty[index].role = this.EvaluatorTypes[0]\n        }\n        else {\n          let evaluator = this.currentTerm.faculty[index]\n          let Eindex = this.EvaluatorTypes.indexOf(type)\n            if(Eindex == 0) {\n              this.currentTerm.faculty[index].role = this.EvaluatorTypes[1]\n            }\n            else {\n              this.currentTerm.faculty[index].role = this.EvaluatorTypes[0]\n            }\n        }\n      },\n      updateOnsite(index, onsite) {\n        console.log(\"UPDATE ONSITE\")\n        console.log(index, onsite)\n        if(onsite == undefined) {\n           this.currentTerm.faculty[index].onsite = this.onsiteoptions[0]\n        }\n        else {\n          let evaluator = this.currentTerm.faculty[index]\n          let Eindex = this.onsiteoptions.indexOf(onsite)\n            if(Eindex == 0) {\n              this.currentTerm.faculty[index].onsite = this.onsiteoptions[1]\n            }\n            else {\n              this.currentTerm.faculty[index].onsite = this.onsiteoptions[0]\n            }\n        }\n      },\n      updatePreinterview(index, preinterview) {\n        console.log(\"UPDATE PREINTERVIEW\")\n       console.log(index, preinterview)\n        if(preinterview == undefined) {\n           this.currentTerm.faculty[index].preinterview = this.preinterviewoptions[0]\n        }\n        else {\n          let evaluator = this.currentTerm.faculty[index]\n          let Eindex = this.preinterviewoptions.indexOf(preinterview)\n            if(Eindex == 0) {\n              evaluator.preinterview = this.preinterviewoptions[1]\n              this.currentTerm.faculty[index] = evaluator\n            }\n            else {\n              evaluator.preinterview = this.preinterviewoptions[0]\n              this.currentTerm.faculty[index] = evaluator\n            }\n        }\n      },\n      toggleDate(index, date) {\n        let x \n        let dates = this.currentTerm.faculty[index].dates\n        let match = false\n        if(dates.length > 0) {\n          for(x in dates) {\n            if(dates[x] == date) {\n              match = true\n              dates.splice(x, 1)\n            }\n          }\n          if(!match) {\n           this.currentTerm.faculty[index].dates.push(date)\n          }\n        }\n        else {\n           this.currentTerm.faculty[index].dates.push(date)\n        }\n        console.log(this.currentTerm.faculty[index].dates)\n      },\n      toggleAvalibility(index, avalibility) {\n        let x \n        let evaluator = this.faculty[index]\n        if(avalibility == false) {\n          evaluator.dates = []\n          evaluator.avalibility = false\n        }\n        else {\n          evaluator.dates = this.interviewDates\n          evaluator.avalibility = true\n        }\n        this.faculty[index] = evaluator\n      },\n      updateOrganization() {\n\n        let x \n        let terms = this.organization.terms\n        for(x in terms) { \n          if(terms[x].year == this.currentTerm.year) {\n              this.organization.terms[x] = this.currentTerm\n            }\n          }\n          // AXIOS UPDATE THE ORGANIZATION VIA API\n          axios.post(API_URL+'/organization/update/terms/'+this.organization.name, this.organization)\n          .then(({data}) => { \n            this.$emit(\"update:organization\", data)\n            let c = confirm(\"Term updated. Move to next step?\")\n            if(c) {\n              this.$emit('nextStep', this.currentTerm)\n            }\n            else {}\n          })\n          .catch(function (e) { alert(e) })\n      },\n      changeTerm(year) {\n        let x\n        let terms = this.organization.terms\n        let term\n        for(x in terms) { \n          if(terms[x].year == year) {\n            console.log(this.currentTerm.faculty)\n            term = this.organization.terms[x]\n            this.interviewDates = terms[x].dates\n            this.$emit('changeTerm', term)\n          }\n        }\n      },\n      changeTab(tab) {\n        this.tab = tab\n      },\n      saveWizard() {\n        this.$refs['em'].activate()\n      },\n      saveDate(x , index) {\n        this.savedDates.push(x)\n        this.interviewDates.splice(index, 1)\n      },\n      removeDate(x, index) {\n        this.interviewDates.splice(index, 1)\n      },\n      removeSavedDate(x, index) {\n        this.savedDates.splice(index, 1)\n      },\n      onContext(ctx) {\n        if(ctx.selectedDate == null) {\n          this.context = ctx\n        }\n        else {\n          this.context = ctx\n          this.interviewDates.push(ctx)\n        }\n      }\n    }\n};\n</script>\n<style scoped lang=\"scss\">\n    #evaluatorTable th {\n    font-size: 10px;\n  }\n   #evaluatorTable td {\n    font-size: 12px;\n    padding: 5px 15px 5px 15px;\n    vertical-align: middle;\n  }\n  #evaluatorTable td:nth-child(2)  {\n    max-width: 200px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  #evaluatorTable td:last-child {\n     width: 300px;\n  }\n</style>"]}]}